/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as GpsJournalRouteImport } from './routes/gpsJournal'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RegCertHarbourRouteImport } from './routes/regCert/harbour'
import { Route as ActivityMapRouteImport } from './routes/activity/map'
import { Route as ActivityActiveBoatRouteImport } from './routes/activity/activeBoat'
import { Route as RegCertRegLocalRouteImport } from './routes/regCert/reg/local'
import { Route as RegCertRegInternationalRouteImport } from './routes/regCert/reg/international'
import { Route as RegCertCertLocalRouteImport } from './routes/regCert/cert/local'
import { Route as RegCertCertInternationalRouteImport } from './routes/regCert/cert/international'

const GpsJournalRoute = GpsJournalRouteImport.update({
  id: '/gpsJournal',
  path: '/gpsJournal',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RegCertHarbourRoute = RegCertHarbourRouteImport.update({
  id: '/regCert/harbour',
  path: '/regCert/harbour',
  getParentRoute: () => rootRouteImport,
} as any)
const ActivityMapRoute = ActivityMapRouteImport.update({
  id: '/activity/map',
  path: '/activity/map',
  getParentRoute: () => rootRouteImport,
} as any)
const ActivityActiveBoatRoute = ActivityActiveBoatRouteImport.update({
  id: '/activity/activeBoat',
  path: '/activity/activeBoat',
  getParentRoute: () => rootRouteImport,
} as any)
const RegCertRegLocalRoute = RegCertRegLocalRouteImport.update({
  id: '/regCert/reg/local',
  path: '/regCert/reg/local',
  getParentRoute: () => rootRouteImport,
} as any)
const RegCertRegInternationalRoute = RegCertRegInternationalRouteImport.update({
  id: '/regCert/reg/international',
  path: '/regCert/reg/international',
  getParentRoute: () => rootRouteImport,
} as any)
const RegCertCertLocalRoute = RegCertCertLocalRouteImport.update({
  id: '/regCert/cert/local',
  path: '/regCert/cert/local',
  getParentRoute: () => rootRouteImport,
} as any)
const RegCertCertInternationalRoute =
  RegCertCertInternationalRouteImport.update({
    id: '/regCert/cert/international',
    path: '/regCert/cert/international',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/gpsJournal': typeof GpsJournalRoute
  '/activity/activeBoat': typeof ActivityActiveBoatRoute
  '/activity/map': typeof ActivityMapRoute
  '/regCert/harbour': typeof RegCertHarbourRoute
  '/regCert/cert/international': typeof RegCertCertInternationalRoute
  '/regCert/cert/local': typeof RegCertCertLocalRoute
  '/regCert/reg/international': typeof RegCertRegInternationalRoute
  '/regCert/reg/local': typeof RegCertRegLocalRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/gpsJournal': typeof GpsJournalRoute
  '/activity/activeBoat': typeof ActivityActiveBoatRoute
  '/activity/map': typeof ActivityMapRoute
  '/regCert/harbour': typeof RegCertHarbourRoute
  '/regCert/cert/international': typeof RegCertCertInternationalRoute
  '/regCert/cert/local': typeof RegCertCertLocalRoute
  '/regCert/reg/international': typeof RegCertRegInternationalRoute
  '/regCert/reg/local': typeof RegCertRegLocalRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/gpsJournal': typeof GpsJournalRoute
  '/activity/activeBoat': typeof ActivityActiveBoatRoute
  '/activity/map': typeof ActivityMapRoute
  '/regCert/harbour': typeof RegCertHarbourRoute
  '/regCert/cert/international': typeof RegCertCertInternationalRoute
  '/regCert/cert/local': typeof RegCertCertLocalRoute
  '/regCert/reg/international': typeof RegCertRegInternationalRoute
  '/regCert/reg/local': typeof RegCertRegLocalRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/gpsJournal'
    | '/activity/activeBoat'
    | '/activity/map'
    | '/regCert/harbour'
    | '/regCert/cert/international'
    | '/regCert/cert/local'
    | '/regCert/reg/international'
    | '/regCert/reg/local'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/gpsJournal'
    | '/activity/activeBoat'
    | '/activity/map'
    | '/regCert/harbour'
    | '/regCert/cert/international'
    | '/regCert/cert/local'
    | '/regCert/reg/international'
    | '/regCert/reg/local'
  id:
    | '__root__'
    | '/'
    | '/gpsJournal'
    | '/activity/activeBoat'
    | '/activity/map'
    | '/regCert/harbour'
    | '/regCert/cert/international'
    | '/regCert/cert/local'
    | '/regCert/reg/international'
    | '/regCert/reg/local'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GpsJournalRoute: typeof GpsJournalRoute
  ActivityActiveBoatRoute: typeof ActivityActiveBoatRoute
  ActivityMapRoute: typeof ActivityMapRoute
  RegCertHarbourRoute: typeof RegCertHarbourRoute
  RegCertCertInternationalRoute: typeof RegCertCertInternationalRoute
  RegCertCertLocalRoute: typeof RegCertCertLocalRoute
  RegCertRegInternationalRoute: typeof RegCertRegInternationalRoute
  RegCertRegLocalRoute: typeof RegCertRegLocalRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/gpsJournal': {
      id: '/gpsJournal'
      path: '/gpsJournal'
      fullPath: '/gpsJournal'
      preLoaderRoute: typeof GpsJournalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/regCert/harbour': {
      id: '/regCert/harbour'
      path: '/regCert/harbour'
      fullPath: '/regCert/harbour'
      preLoaderRoute: typeof RegCertHarbourRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/activity/map': {
      id: '/activity/map'
      path: '/activity/map'
      fullPath: '/activity/map'
      preLoaderRoute: typeof ActivityMapRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/activity/activeBoat': {
      id: '/activity/activeBoat'
      path: '/activity/activeBoat'
      fullPath: '/activity/activeBoat'
      preLoaderRoute: typeof ActivityActiveBoatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/regCert/reg/local': {
      id: '/regCert/reg/local'
      path: '/regCert/reg/local'
      fullPath: '/regCert/reg/local'
      preLoaderRoute: typeof RegCertRegLocalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/regCert/reg/international': {
      id: '/regCert/reg/international'
      path: '/regCert/reg/international'
      fullPath: '/regCert/reg/international'
      preLoaderRoute: typeof RegCertRegInternationalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/regCert/cert/local': {
      id: '/regCert/cert/local'
      path: '/regCert/cert/local'
      fullPath: '/regCert/cert/local'
      preLoaderRoute: typeof RegCertCertLocalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/regCert/cert/international': {
      id: '/regCert/cert/international'
      path: '/regCert/cert/international'
      fullPath: '/regCert/cert/international'
      preLoaderRoute: typeof RegCertCertInternationalRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GpsJournalRoute: GpsJournalRoute,
  ActivityActiveBoatRoute: ActivityActiveBoatRoute,
  ActivityMapRoute: ActivityMapRoute,
  RegCertHarbourRoute: RegCertHarbourRoute,
  RegCertCertInternationalRoute: RegCertCertInternationalRoute,
  RegCertCertLocalRoute: RegCertCertLocalRoute,
  RegCertRegInternationalRoute: RegCertRegInternationalRoute,
  RegCertRegLocalRoute: RegCertRegLocalRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
